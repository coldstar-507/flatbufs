// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library flatgen;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class MessageId {
  MessageId._(this._bc, this._bcOffset);
  factory MessageId(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageId> reader = _MessageIdReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get timestamp => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get u32 => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String? get root => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  int get place => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get kind => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 12, 0);

  @override
  String toString() {
    return 'MessageId{timestamp: ${timestamp}, u32: ${u32}, root: ${root}, place: ${place}, kind: ${kind}}';
  }

  MessageIdT unpack() => MessageIdT(
      timestamp: timestamp,
      u32: u32,
      root: root,
      place: place,
      kind: kind);

  static int pack(fb.Builder fbBuilder, MessageIdT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MessageIdT implements fb.Packable {
  int timestamp;
  int u32;
  String? root;
  int place;
  int kind;

  MessageIdT({
      this.timestamp = 0,
      this.u32 = 0,
      this.root,
      this.place = 0,
      this.kind = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? rootOffset = root == null ? null
        : fbBuilder.writeString(root!);
    fbBuilder.startTable(5);
    fbBuilder.addInt64(0, timestamp);
    fbBuilder.addUint32(1, u32);
    fbBuilder.addOffset(2, rootOffset);
    fbBuilder.addUint16(3, place);
    fbBuilder.addUint8(4, kind);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MessageIdT{timestamp: ${timestamp}, u32: ${u32}, root: ${root}, place: ${place}, kind: ${kind}}';
  }
}

class _MessageIdReader extends fb.TableReader<MessageId> {
  const _MessageIdReader();

  @override
  MessageId createObject(fb.BufferContext bc, int offset) => 
    MessageId._(bc, offset);
}

class MessageIdBuilder {
  MessageIdBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addTimestamp(int? timestamp) {
    fbBuilder.addInt64(0, timestamp);
    return fbBuilder.offset;
  }
  int addU32(int? u32) {
    fbBuilder.addUint32(1, u32);
    return fbBuilder.offset;
  }
  int addRootOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addPlace(int? place) {
    fbBuilder.addUint16(3, place);
    return fbBuilder.offset;
  }
  int addKind(int? kind) {
    fbBuilder.addUint8(4, kind);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageIdObjectBuilder extends fb.ObjectBuilder {
  final int? _timestamp;
  final int? _u32;
  final String? _root;
  final int? _place;
  final int? _kind;

  MessageIdObjectBuilder({
    int? timestamp,
    int? u32,
    String? root,
    int? place,
    int? kind,
  })
      : _timestamp = timestamp,
        _u32 = u32,
        _root = root,
        _place = place,
        _kind = kind;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? rootOffset = _root == null ? null
        : fbBuilder.writeString(_root!);
    fbBuilder.startTable(5);
    fbBuilder.addInt64(0, _timestamp);
    fbBuilder.addUint32(1, _u32);
    fbBuilder.addOffset(2, rootOffset);
    fbBuilder.addUint16(3, _place);
    fbBuilder.addUint8(4, _kind);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TempId {
  TempId._(this._bc, this._bcOffset);
  factory TempId(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TempId> reader = _TempIdReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get timestamp => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get u32 => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get place => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get kind => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 10, 0);

  @override
  String toString() {
    return 'TempId{timestamp: ${timestamp}, u32: ${u32}, place: ${place}, kind: ${kind}}';
  }

  TempIdT unpack() => TempIdT(
      timestamp: timestamp,
      u32: u32,
      place: place,
      kind: kind);

  static int pack(fb.Builder fbBuilder, TempIdT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class TempIdT implements fb.Packable {
  int timestamp;
  int u32;
  int place;
  int kind;

  TempIdT({
      this.timestamp = 0,
      this.u32 = 0,
      this.place = 0,
      this.kind = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(4);
    fbBuilder.addInt64(0, timestamp);
    fbBuilder.addUint32(1, u32);
    fbBuilder.addUint16(2, place);
    fbBuilder.addUint8(3, kind);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'TempIdT{timestamp: ${timestamp}, u32: ${u32}, place: ${place}, kind: ${kind}}';
  }
}

class _TempIdReader extends fb.TableReader<TempId> {
  const _TempIdReader();

  @override
  TempId createObject(fb.BufferContext bc, int offset) => 
    TempId._(bc, offset);
}

class TempIdBuilder {
  TempIdBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addTimestamp(int? timestamp) {
    fbBuilder.addInt64(0, timestamp);
    return fbBuilder.offset;
  }
  int addU32(int? u32) {
    fbBuilder.addUint32(1, u32);
    return fbBuilder.offset;
  }
  int addPlace(int? place) {
    fbBuilder.addUint16(2, place);
    return fbBuilder.offset;
  }
  int addKind(int? kind) {
    fbBuilder.addUint8(3, kind);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TempIdObjectBuilder extends fb.ObjectBuilder {
  final int? _timestamp;
  final int? _u32;
  final int? _place;
  final int? _kind;

  TempIdObjectBuilder({
    int? timestamp,
    int? u32,
    int? place,
    int? kind,
  })
      : _timestamp = timestamp,
        _u32 = u32,
        _place = place,
        _kind = kind;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(4);
    fbBuilder.addInt64(0, _timestamp);
    fbBuilder.addUint32(1, _u32);
    fbBuilder.addUint16(2, _place);
    fbBuilder.addUint8(3, _kind);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PushId {
  PushId._(this._bc, this._bcOffset);
  factory PushId(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PushId> reader = _PushIdReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get u32 => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get timestamp => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get place => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 8, 0);
  String? get root => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  int get device => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 12, 0);

  @override
  String toString() {
    return 'PushId{u32: ${u32}, timestamp: ${timestamp}, place: ${place}, root: ${root}, device: ${device}}';
  }

  PushIdT unpack() => PushIdT(
      u32: u32,
      timestamp: timestamp,
      place: place,
      root: root,
      device: device);

  static int pack(fb.Builder fbBuilder, PushIdT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class PushIdT implements fb.Packable {
  int u32;
  int timestamp;
  int place;
  String? root;
  int device;

  PushIdT({
      this.u32 = 0,
      this.timestamp = 0,
      this.place = 0,
      this.root,
      this.device = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? rootOffset = root == null ? null
        : fbBuilder.writeString(root!);
    fbBuilder.startTable(5);
    fbBuilder.addUint32(0, u32);
    fbBuilder.addInt64(1, timestamp);
    fbBuilder.addUint16(2, place);
    fbBuilder.addOffset(3, rootOffset);
    fbBuilder.addUint32(4, device);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'PushIdT{u32: ${u32}, timestamp: ${timestamp}, place: ${place}, root: ${root}, device: ${device}}';
  }
}

class _PushIdReader extends fb.TableReader<PushId> {
  const _PushIdReader();

  @override
  PushId createObject(fb.BufferContext bc, int offset) => 
    PushId._(bc, offset);
}

class PushIdBuilder {
  PushIdBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addU32(int? u32) {
    fbBuilder.addUint32(0, u32);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addInt64(1, timestamp);
    return fbBuilder.offset;
  }
  int addPlace(int? place) {
    fbBuilder.addUint16(2, place);
    return fbBuilder.offset;
  }
  int addRootOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addDevice(int? device) {
    fbBuilder.addUint32(4, device);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PushIdObjectBuilder extends fb.ObjectBuilder {
  final int? _u32;
  final int? _timestamp;
  final int? _place;
  final String? _root;
  final int? _device;

  PushIdObjectBuilder({
    int? u32,
    int? timestamp,
    int? place,
    String? root,
    int? device,
  })
      : _u32 = u32,
        _timestamp = timestamp,
        _place = place,
        _root = root,
        _device = device;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? rootOffset = _root == null ? null
        : fbBuilder.writeString(_root!);
    fbBuilder.startTable(5);
    fbBuilder.addUint32(0, _u32);
    fbBuilder.addInt64(1, _timestamp);
    fbBuilder.addUint16(2, _place);
    fbBuilder.addOffset(3, rootOffset);
    fbBuilder.addUint32(4, _device);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MessageTarget {
  MessageTarget._(this._bc, this._bcOffset);
  factory MessageTarget(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageTarget> reader = _MessageTargetReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get userId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get deviceId => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String? get token => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  bool get showNotif => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  bool get doPush => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);

  @override
  String toString() {
    return 'MessageTarget{userId: ${userId}, deviceId: ${deviceId}, token: ${token}, showNotif: ${showNotif}, doPush: ${doPush}}';
  }

  MessageTargetT unpack() => MessageTargetT(
      userId: userId,
      deviceId: deviceId,
      token: token,
      showNotif: showNotif,
      doPush: doPush);

  static int pack(fb.Builder fbBuilder, MessageTargetT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MessageTargetT implements fb.Packable {
  String? userId;
  int deviceId;
  String? token;
  bool showNotif;
  bool doPush;

  MessageTargetT({
      this.userId,
      this.deviceId = 0,
      this.token,
      this.showNotif = false,
      this.doPush = false});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? userIdOffset = userId == null ? null
        : fbBuilder.writeString(userId!);
    final int? tokenOffset = token == null ? null
        : fbBuilder.writeString(token!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, userIdOffset);
    fbBuilder.addUint32(1, deviceId);
    fbBuilder.addOffset(2, tokenOffset);
    fbBuilder.addBool(3, showNotif);
    fbBuilder.addBool(4, doPush);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MessageTargetT{userId: ${userId}, deviceId: ${deviceId}, token: ${token}, showNotif: ${showNotif}, doPush: ${doPush}}';
  }
}

class _MessageTargetReader extends fb.TableReader<MessageTarget> {
  const _MessageTargetReader();

  @override
  MessageTarget createObject(fb.BufferContext bc, int offset) => 
    MessageTarget._(bc, offset);
}

class MessageTargetBuilder {
  MessageTargetBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addUserIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDeviceId(int? deviceId) {
    fbBuilder.addUint32(1, deviceId);
    return fbBuilder.offset;
  }
  int addTokenOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addShowNotif(bool? showNotif) {
    fbBuilder.addBool(3, showNotif);
    return fbBuilder.offset;
  }
  int addDoPush(bool? doPush) {
    fbBuilder.addBool(4, doPush);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageTargetObjectBuilder extends fb.ObjectBuilder {
  final String? _userId;
  final int? _deviceId;
  final String? _token;
  final bool? _showNotif;
  final bool? _doPush;

  MessageTargetObjectBuilder({
    String? userId,
    int? deviceId,
    String? token,
    bool? showNotif,
    bool? doPush,
  })
      : _userId = userId,
        _deviceId = deviceId,
        _token = token,
        _showNotif = showNotif,
        _doPush = doPush;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? userIdOffset = _userId == null ? null
        : fbBuilder.writeString(_userId!);
    final int? tokenOffset = _token == null ? null
        : fbBuilder.writeString(_token!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, userIdOffset);
    fbBuilder.addUint32(1, _deviceId);
    fbBuilder.addOffset(2, tokenOffset);
    fbBuilder.addBool(3, _showNotif);
    fbBuilder.addBool(4, _doPush);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Notifications {
  Notifications._(this._bc, this._bcOffset);
  factory Notifications(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Notifications> reader = _NotificationsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get sender => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get root => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get header => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get body => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  List<MessageTarget>? get targets => const fb.ListReader<MessageTarget>(MessageTarget.reader).vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'Notifications{sender: ${sender}, root: ${root}, header: ${header}, body: ${body}, targets: ${targets}}';
  }

  NotificationsT unpack() => NotificationsT(
      sender: sender,
      root: root,
      header: header,
      body: body,
      targets: targets?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, NotificationsT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class NotificationsT implements fb.Packable {
  String? sender;
  String? root;
  String? header;
  String? body;
  List<MessageTargetT>? targets;

  NotificationsT({
      this.sender,
      this.root,
      this.header,
      this.body,
      this.targets});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? senderOffset = sender == null ? null
        : fbBuilder.writeString(sender!);
    final int? rootOffset = root == null ? null
        : fbBuilder.writeString(root!);
    final int? headerOffset = header == null ? null
        : fbBuilder.writeString(header!);
    final int? bodyOffset = body == null ? null
        : fbBuilder.writeString(body!);
    final int? targetsOffset = targets == null ? null
        : fbBuilder.writeList(targets!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, senderOffset);
    fbBuilder.addOffset(1, rootOffset);
    fbBuilder.addOffset(2, headerOffset);
    fbBuilder.addOffset(3, bodyOffset);
    fbBuilder.addOffset(4, targetsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'NotificationsT{sender: ${sender}, root: ${root}, header: ${header}, body: ${body}, targets: ${targets}}';
  }
}

class _NotificationsReader extends fb.TableReader<Notifications> {
  const _NotificationsReader();

  @override
  Notifications createObject(fb.BufferContext bc, int offset) => 
    Notifications._(bc, offset);
}

class NotificationsBuilder {
  NotificationsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addSenderOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRootOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addHeaderOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addBodyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTargetsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NotificationsObjectBuilder extends fb.ObjectBuilder {
  final String? _sender;
  final String? _root;
  final String? _header;
  final String? _body;
  final List<MessageTargetObjectBuilder>? _targets;

  NotificationsObjectBuilder({
    String? sender,
    String? root,
    String? header,
    String? body,
    List<MessageTargetObjectBuilder>? targets,
  })
      : _sender = sender,
        _root = root,
        _header = header,
        _body = body,
        _targets = targets;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? senderOffset = _sender == null ? null
        : fbBuilder.writeString(_sender!);
    final int? rootOffset = _root == null ? null
        : fbBuilder.writeString(_root!);
    final int? headerOffset = _header == null ? null
        : fbBuilder.writeString(_header!);
    final int? bodyOffset = _body == null ? null
        : fbBuilder.writeString(_body!);
    final int? targetsOffset = _targets == null ? null
        : fbBuilder.writeList(_targets!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, senderOffset);
    fbBuilder.addOffset(1, rootOffset);
    fbBuilder.addOffset(2, headerOffset);
    fbBuilder.addOffset(3, bodyOffset);
    fbBuilder.addOffset(4, targetsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ChatScrollRequest {
  ChatScrollRequest._(this._bc, this._bcOffset);
  factory ChatScrollRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ChatScrollRequest> reader = _ChatScrollRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get chatId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  bool get before => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);

  @override
  String toString() {
    return 'ChatScrollRequest{chatId: ${chatId}, before: ${before}}';
  }

  ChatScrollRequestT unpack() => ChatScrollRequestT(
      chatId: chatId,
      before: before);

  static int pack(fb.Builder fbBuilder, ChatScrollRequestT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ChatScrollRequestT implements fb.Packable {
  String? chatId;
  bool before;

  ChatScrollRequestT({
      this.chatId,
      this.before = false});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? chatIdOffset = chatId == null ? null
        : fbBuilder.writeString(chatId!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, chatIdOffset);
    fbBuilder.addBool(1, before);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ChatScrollRequestT{chatId: ${chatId}, before: ${before}}';
  }
}

class _ChatScrollRequestReader extends fb.TableReader<ChatScrollRequest> {
  const _ChatScrollRequestReader();

  @override
  ChatScrollRequest createObject(fb.BufferContext bc, int offset) => 
    ChatScrollRequest._(bc, offset);
}

class ChatScrollRequestBuilder {
  ChatScrollRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addChatIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addBefore(bool? before) {
    fbBuilder.addBool(1, before);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ChatScrollRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _chatId;
  final bool? _before;

  ChatScrollRequestObjectBuilder({
    String? chatId,
    bool? before,
  })
      : _chatId = chatId,
        _before = before;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? chatIdOffset = _chatId == null ? null
        : fbBuilder.writeString(_chatId!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, chatIdOffset);
    fbBuilder.addBool(1, _before);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Snip {
  Snip._(this._bc, this._bcOffset);
  factory Snip(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Snip> reader = _SnipReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get chatId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get senderId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get tag => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get mediaId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get tempMedia => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get txt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  Offset? get snipSize => Offset.reader.vTableGetNullable(_bc, _bcOffset, 16);
  List<Sticker>? get sticks => const fb.ListReader<Sticker>(Sticker.reader).vTableGetNullable(_bc, _bcOffset, 18);

  @override
  String toString() {
    return 'Snip{chatId: ${chatId}, senderId: ${senderId}, tag: ${tag}, mediaId: ${mediaId}, tempMedia: ${tempMedia}, txt: ${txt}, snipSize: ${snipSize}, sticks: ${sticks}}';
  }

  SnipT unpack() => SnipT(
      chatId: chatId,
      senderId: senderId,
      tag: tag,
      mediaId: mediaId,
      tempMedia: tempMedia,
      txt: txt,
      snipSize: snipSize?.unpack(),
      sticks: sticks?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, SnipT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SnipT implements fb.Packable {
  String? chatId;
  String? senderId;
  String? tag;
  String? mediaId;
  String? tempMedia;
  String? txt;
  OffsetT? snipSize;
  List<StickerT>? sticks;

  SnipT({
      this.chatId,
      this.senderId,
      this.tag,
      this.mediaId,
      this.tempMedia,
      this.txt,
      this.snipSize,
      this.sticks});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? chatIdOffset = chatId == null ? null
        : fbBuilder.writeString(chatId!);
    final int? senderIdOffset = senderId == null ? null
        : fbBuilder.writeString(senderId!);
    final int? tagOffset = tag == null ? null
        : fbBuilder.writeString(tag!);
    final int? mediaIdOffset = mediaId == null ? null
        : fbBuilder.writeString(mediaId!);
    final int? tempMediaOffset = tempMedia == null ? null
        : fbBuilder.writeString(tempMedia!);
    final int? txtOffset = txt == null ? null
        : fbBuilder.writeString(txt!);
    final int? sticksOffset = sticks == null ? null
        : fbBuilder.writeList(sticks!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, chatIdOffset);
    fbBuilder.addOffset(1, senderIdOffset);
    fbBuilder.addOffset(2, tagOffset);
    fbBuilder.addOffset(3, mediaIdOffset);
    fbBuilder.addOffset(4, tempMediaOffset);
    fbBuilder.addOffset(5, txtOffset);
    if (snipSize != null) {
      fbBuilder.addStruct(6, snipSize!.pack(fbBuilder));
    }
    fbBuilder.addOffset(7, sticksOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SnipT{chatId: ${chatId}, senderId: ${senderId}, tag: ${tag}, mediaId: ${mediaId}, tempMedia: ${tempMedia}, txt: ${txt}, snipSize: ${snipSize}, sticks: ${sticks}}';
  }
}

class _SnipReader extends fb.TableReader<Snip> {
  const _SnipReader();

  @override
  Snip createObject(fb.BufferContext bc, int offset) => 
    Snip._(bc, offset);
}

class SnipBuilder {
  SnipBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addChatIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSenderIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTagOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addMediaIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTempMediaOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTxtOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSnipSize(int offset) {
    fbBuilder.addStruct(6, offset);
    return fbBuilder.offset;
  }
  int addSticksOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SnipObjectBuilder extends fb.ObjectBuilder {
  final String? _chatId;
  final String? _senderId;
  final String? _tag;
  final String? _mediaId;
  final String? _tempMedia;
  final String? _txt;
  final OffsetObjectBuilder? _snipSize;
  final List<StickerObjectBuilder>? _sticks;

  SnipObjectBuilder({
    String? chatId,
    String? senderId,
    String? tag,
    String? mediaId,
    String? tempMedia,
    String? txt,
    OffsetObjectBuilder? snipSize,
    List<StickerObjectBuilder>? sticks,
  })
      : _chatId = chatId,
        _senderId = senderId,
        _tag = tag,
        _mediaId = mediaId,
        _tempMedia = tempMedia,
        _txt = txt,
        _snipSize = snipSize,
        _sticks = sticks;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? chatIdOffset = _chatId == null ? null
        : fbBuilder.writeString(_chatId!);
    final int? senderIdOffset = _senderId == null ? null
        : fbBuilder.writeString(_senderId!);
    final int? tagOffset = _tag == null ? null
        : fbBuilder.writeString(_tag!);
    final int? mediaIdOffset = _mediaId == null ? null
        : fbBuilder.writeString(_mediaId!);
    final int? tempMediaOffset = _tempMedia == null ? null
        : fbBuilder.writeString(_tempMedia!);
    final int? txtOffset = _txt == null ? null
        : fbBuilder.writeString(_txt!);
    final int? sticksOffset = _sticks == null ? null
        : fbBuilder.writeList(_sticks!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, chatIdOffset);
    fbBuilder.addOffset(1, senderIdOffset);
    fbBuilder.addOffset(2, tagOffset);
    fbBuilder.addOffset(3, mediaIdOffset);
    fbBuilder.addOffset(4, tempMediaOffset);
    fbBuilder.addOffset(5, txtOffset);
    if (_snipSize != null) {
      fbBuilder.addStruct(6, _snipSize!.finish(fbBuilder));
    }
    fbBuilder.addOffset(7, sticksOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PushRequest {
  PushRequest._(this._bc, this._bcOffset);
  factory PushRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PushRequest> reader = _PushRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  PushId? get pushId => PushId.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<int>? get payload => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PushRequest{pushId: ${pushId}, payload: ${payload}}';
  }

  PushRequestT unpack() => PushRequestT(
      pushId: pushId?.unpack(),
      payload: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 6));

  static int pack(fb.Builder fbBuilder, PushRequestT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class PushRequestT implements fb.Packable {
  PushIdT? pushId;
  List<int>? payload;

  PushRequestT({
      this.pushId,
      this.payload});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? pushIdOffset = pushId?.pack(fbBuilder);
    final int? payloadOffset = payload == null ? null
        : fbBuilder.writeListUint8(payload!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, pushIdOffset);
    fbBuilder.addOffset(1, payloadOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'PushRequestT{pushId: ${pushId}, payload: ${payload}}';
  }
}

class _PushRequestReader extends fb.TableReader<PushRequest> {
  const _PushRequestReader();

  @override
  PushRequest createObject(fb.BufferContext bc, int offset) => 
    PushRequest._(bc, offset);
}

class PushRequestBuilder {
  PushRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPushIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPayloadOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PushRequestObjectBuilder extends fb.ObjectBuilder {
  final PushIdObjectBuilder? _pushId;
  final List<int>? _payload;

  PushRequestObjectBuilder({
    PushIdObjectBuilder? pushId,
    List<int>? payload,
  })
      : _pushId = pushId,
        _payload = payload;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pushIdOffset = _pushId?.getOrCreateOffset(fbBuilder);
    final int? payloadOffset = _payload == null ? null
        : fbBuilder.writeListUint8(_payload!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, pushIdOffset);
    fbBuilder.addOffset(1, payloadOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ScrollRes {
  ScrollRes._(this._bc, this._bcOffset);
  factory ScrollRes(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ScrollRes> reader = _ScrollResReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get code => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  bool get before => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  String? get root => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ScrollRes{code: ${code}, before: ${before}, root: ${root}}';
  }

  ScrollResT unpack() => ScrollResT(
      code: code,
      before: before,
      root: root);

  static int pack(fb.Builder fbBuilder, ScrollResT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ScrollResT implements fb.Packable {
  bool code;
  bool before;
  String? root;

  ScrollResT({
      this.code = false,
      this.before = false,
      this.root});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? rootOffset = root == null ? null
        : fbBuilder.writeString(root!);
    fbBuilder.startTable(3);
    fbBuilder.addBool(0, code);
    fbBuilder.addBool(1, before);
    fbBuilder.addOffset(2, rootOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ScrollResT{code: ${code}, before: ${before}, root: ${root}}';
  }
}

class _ScrollResReader extends fb.TableReader<ScrollRes> {
  const _ScrollResReader();

  @override
  ScrollRes createObject(fb.BufferContext bc, int offset) => 
    ScrollRes._(bc, offset);
}

class ScrollResBuilder {
  ScrollResBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addCode(bool? code) {
    fbBuilder.addBool(0, code);
    return fbBuilder.offset;
  }
  int addBefore(bool? before) {
    fbBuilder.addBool(1, before);
    return fbBuilder.offset;
  }
  int addRootOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ScrollResObjectBuilder extends fb.ObjectBuilder {
  final bool? _code;
  final bool? _before;
  final String? _root;

  ScrollResObjectBuilder({
    bool? code,
    bool? before,
    String? root,
  })
      : _code = code,
        _before = before,
        _root = root;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? rootOffset = _root == null ? null
        : fbBuilder.writeString(_root!);
    fbBuilder.startTable(3);
    fbBuilder.addBool(0, _code);
    fbBuilder.addBool(1, _before);
    fbBuilder.addOffset(2, rootOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MediaMetadata {
  MediaMetadata._(this._bc, this._bcOffset);
  factory MediaMetadata(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MediaMetadata> reader = _MediaMetadataReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get timeId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get ownerId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get timestamp => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  String? get mime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  bool get isReversed => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);
  bool get isEncrypted => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);
  bool get isPaidToView => const fb.BoolReader().vTableGet(_bc, _bcOffset, 16, false);
  bool get isPaidToOwn => const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);
  bool get isLocked => const fb.BoolReader().vTableGet(_bc, _bcOffset, 20, false);
  bool get isSaved => const fb.BoolReader().vTableGet(_bc, _bcOffset, 22, false);
  String? get temp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);

  @override
  String toString() {
    return 'MediaMetadata{timeId: ${timeId}, ownerId: ${ownerId}, timestamp: ${timestamp}, mime: ${mime}, isReversed: ${isReversed}, isEncrypted: ${isEncrypted}, isPaidToView: ${isPaidToView}, isPaidToOwn: ${isPaidToOwn}, isLocked: ${isLocked}, isSaved: ${isSaved}, temp: ${temp}}';
  }

  MediaMetadataT unpack() => MediaMetadataT(
      timeId: timeId,
      ownerId: ownerId,
      timestamp: timestamp,
      mime: mime,
      isReversed: isReversed,
      isEncrypted: isEncrypted,
      isPaidToView: isPaidToView,
      isPaidToOwn: isPaidToOwn,
      isLocked: isLocked,
      isSaved: isSaved,
      temp: temp);

  static int pack(fb.Builder fbBuilder, MediaMetadataT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MediaMetadataT implements fb.Packable {
  String? timeId;
  String? ownerId;
  int timestamp;
  String? mime;
  bool isReversed;
  bool isEncrypted;
  bool isPaidToView;
  bool isPaidToOwn;
  bool isLocked;
  bool isSaved;
  String? temp;

  MediaMetadataT({
      this.timeId,
      this.ownerId,
      this.timestamp = 0,
      this.mime,
      this.isReversed = false,
      this.isEncrypted = false,
      this.isPaidToView = false,
      this.isPaidToOwn = false,
      this.isLocked = false,
      this.isSaved = false,
      this.temp});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? timeIdOffset = timeId == null ? null
        : fbBuilder.writeString(timeId!);
    final int? ownerIdOffset = ownerId == null ? null
        : fbBuilder.writeString(ownerId!);
    final int? mimeOffset = mime == null ? null
        : fbBuilder.writeString(mime!);
    final int? tempOffset = temp == null ? null
        : fbBuilder.writeString(temp!);
    fbBuilder.startTable(11);
    fbBuilder.addOffset(0, timeIdOffset);
    fbBuilder.addOffset(1, ownerIdOffset);
    fbBuilder.addInt64(2, timestamp);
    fbBuilder.addOffset(3, mimeOffset);
    fbBuilder.addBool(4, isReversed);
    fbBuilder.addBool(5, isEncrypted);
    fbBuilder.addBool(6, isPaidToView);
    fbBuilder.addBool(7, isPaidToOwn);
    fbBuilder.addBool(8, isLocked);
    fbBuilder.addBool(9, isSaved);
    fbBuilder.addOffset(10, tempOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MediaMetadataT{timeId: ${timeId}, ownerId: ${ownerId}, timestamp: ${timestamp}, mime: ${mime}, isReversed: ${isReversed}, isEncrypted: ${isEncrypted}, isPaidToView: ${isPaidToView}, isPaidToOwn: ${isPaidToOwn}, isLocked: ${isLocked}, isSaved: ${isSaved}, temp: ${temp}}';
  }
}

class _MediaMetadataReader extends fb.TableReader<MediaMetadata> {
  const _MediaMetadataReader();

  @override
  MediaMetadata createObject(fb.BufferContext bc, int offset) => 
    MediaMetadata._(bc, offset);
}

class MediaMetadataBuilder {
  MediaMetadataBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(11);
  }

  int addTimeIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addOwnerIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addInt64(2, timestamp);
    return fbBuilder.offset;
  }
  int addMimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addIsReversed(bool? isReversed) {
    fbBuilder.addBool(4, isReversed);
    return fbBuilder.offset;
  }
  int addIsEncrypted(bool? isEncrypted) {
    fbBuilder.addBool(5, isEncrypted);
    return fbBuilder.offset;
  }
  int addIsPaidToView(bool? isPaidToView) {
    fbBuilder.addBool(6, isPaidToView);
    return fbBuilder.offset;
  }
  int addIsPaidToOwn(bool? isPaidToOwn) {
    fbBuilder.addBool(7, isPaidToOwn);
    return fbBuilder.offset;
  }
  int addIsLocked(bool? isLocked) {
    fbBuilder.addBool(8, isLocked);
    return fbBuilder.offset;
  }
  int addIsSaved(bool? isSaved) {
    fbBuilder.addBool(9, isSaved);
    return fbBuilder.offset;
  }
  int addTempOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MediaMetadataObjectBuilder extends fb.ObjectBuilder {
  final String? _timeId;
  final String? _ownerId;
  final int? _timestamp;
  final String? _mime;
  final bool? _isReversed;
  final bool? _isEncrypted;
  final bool? _isPaidToView;
  final bool? _isPaidToOwn;
  final bool? _isLocked;
  final bool? _isSaved;
  final String? _temp;

  MediaMetadataObjectBuilder({
    String? timeId,
    String? ownerId,
    int? timestamp,
    String? mime,
    bool? isReversed,
    bool? isEncrypted,
    bool? isPaidToView,
    bool? isPaidToOwn,
    bool? isLocked,
    bool? isSaved,
    String? temp,
  })
      : _timeId = timeId,
        _ownerId = ownerId,
        _timestamp = timestamp,
        _mime = mime,
        _isReversed = isReversed,
        _isEncrypted = isEncrypted,
        _isPaidToView = isPaidToView,
        _isPaidToOwn = isPaidToOwn,
        _isLocked = isLocked,
        _isSaved = isSaved,
        _temp = temp;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? timeIdOffset = _timeId == null ? null
        : fbBuilder.writeString(_timeId!);
    final int? ownerIdOffset = _ownerId == null ? null
        : fbBuilder.writeString(_ownerId!);
    final int? mimeOffset = _mime == null ? null
        : fbBuilder.writeString(_mime!);
    final int? tempOffset = _temp == null ? null
        : fbBuilder.writeString(_temp!);
    fbBuilder.startTable(11);
    fbBuilder.addOffset(0, timeIdOffset);
    fbBuilder.addOffset(1, ownerIdOffset);
    fbBuilder.addInt64(2, _timestamp);
    fbBuilder.addOffset(3, mimeOffset);
    fbBuilder.addBool(4, _isReversed);
    fbBuilder.addBool(5, _isEncrypted);
    fbBuilder.addBool(6, _isPaidToView);
    fbBuilder.addBool(7, _isPaidToOwn);
    fbBuilder.addBool(8, _isLocked);
    fbBuilder.addBool(9, _isSaved);
    fbBuilder.addOffset(10, tempOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class FullMedia {
  FullMedia._(this._bc, this._bcOffset);
  factory FullMedia(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FullMedia> reader = _FullMediaReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  MediaMetadata? get metadata => MediaMetadata.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<int>? get data => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'FullMedia{metadata: ${metadata}, data: ${data}}';
  }

  FullMediaT unpack() => FullMediaT(
      metadata: metadata?.unpack(),
      data: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 6));

  static int pack(fb.Builder fbBuilder, FullMediaT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class FullMediaT implements fb.Packable {
  MediaMetadataT? metadata;
  List<int>? data;

  FullMediaT({
      this.metadata,
      this.data});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? metadataOffset = metadata?.pack(fbBuilder);
    final int? dataOffset = data == null ? null
        : fbBuilder.writeListUint8(data!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, dataOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'FullMediaT{metadata: ${metadata}, data: ${data}}';
  }
}

class _FullMediaReader extends fb.TableReader<FullMedia> {
  const _FullMediaReader();

  @override
  FullMedia createObject(fb.BufferContext bc, int offset) => 
    FullMedia._(bc, offset);
}

class FullMediaBuilder {
  FullMediaBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDataOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FullMediaObjectBuilder extends fb.ObjectBuilder {
  final MediaMetadataObjectBuilder? _metadata;
  final List<int>? _data;

  FullMediaObjectBuilder({
    MediaMetadataObjectBuilder? metadata,
    List<int>? data,
  })
      : _metadata = metadata,
        _data = data;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? dataOffset = _data == null ? null
        : fbBuilder.writeListUint8(_data!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, dataOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Offset {
  Offset._(this._bc, this._bcOffset);

  static const fb.Reader<Offset> reader = _OffsetReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  double get x => const fb.Float32Reader().read(_bc, _bcOffset + 0);
  double get y => const fb.Float32Reader().read(_bc, _bcOffset + 4);

  @override
  String toString() {
    return 'Offset{x: ${x}, y: ${y}}';
  }

  OffsetT unpack() => OffsetT(
      x: x,
      y: y);

  static int pack(fb.Builder fbBuilder, OffsetT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class OffsetT implements fb.Packable {
  double x;
  double y;

  OffsetT({
      required this.x,
      required this.y});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.putFloat32(y);
    fbBuilder.putFloat32(x);
    return fbBuilder.offset;
  }

  @override
  String toString() {
    return 'OffsetT{x: ${x}, y: ${y}}';
  }
}

class _OffsetReader extends fb.StructReader<Offset> {
  const _OffsetReader();

  @override
  int get size => 8;

  @override
  Offset createObject(fb.BufferContext bc, int offset) => 
    Offset._(bc, offset);
}

class OffsetBuilder {
  OffsetBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(double x, double y) {
    fbBuilder.putFloat32(y);
    fbBuilder.putFloat32(x);
    return fbBuilder.offset;
  }

}

class OffsetObjectBuilder extends fb.ObjectBuilder {
  final double _x;
  final double _y;

  OffsetObjectBuilder({
    required double x,
    required double y,
  })
      : _x = x,
        _y = y;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.putFloat32(_y);
    fbBuilder.putFloat32(_x);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Sticker {
  Sticker._(this._bc, this._bcOffset);
  factory Sticker(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Sticker> reader = _StickerReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get mediaId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get temp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  Offset? get pos => Offset.reader.vTableGetNullable(_bc, _bcOffset, 8);
  Offset? get size => Offset.reader.vTableGetNullable(_bc, _bcOffset, 10);
  double get rotation => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  double get scale => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  String? get emoji => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'Sticker{mediaId: ${mediaId}, temp: ${temp}, pos: ${pos}, size: ${size}, rotation: ${rotation}, scale: ${scale}, emoji: ${emoji}}';
  }

  StickerT unpack() => StickerT(
      mediaId: mediaId,
      temp: temp,
      pos: pos?.unpack(),
      size: size?.unpack(),
      rotation: rotation,
      scale: scale,
      emoji: emoji);

  static int pack(fb.Builder fbBuilder, StickerT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class StickerT implements fb.Packable {
  String? mediaId;
  String? temp;
  OffsetT? pos;
  OffsetT? size;
  double rotation;
  double scale;
  String? emoji;

  StickerT({
      this.mediaId,
      this.temp,
      this.pos,
      this.size,
      this.rotation = 0.0,
      this.scale = 0.0,
      this.emoji});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? mediaIdOffset = mediaId == null ? null
        : fbBuilder.writeString(mediaId!);
    final int? tempOffset = temp == null ? null
        : fbBuilder.writeString(temp!);
    final int? emojiOffset = emoji == null ? null
        : fbBuilder.writeString(emoji!);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, mediaIdOffset);
    fbBuilder.addOffset(1, tempOffset);
    if (pos != null) {
      fbBuilder.addStruct(2, pos!.pack(fbBuilder));
    }
    if (size != null) {
      fbBuilder.addStruct(3, size!.pack(fbBuilder));
    }
    fbBuilder.addFloat32(4, rotation);
    fbBuilder.addFloat32(5, scale);
    fbBuilder.addOffset(6, emojiOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'StickerT{mediaId: ${mediaId}, temp: ${temp}, pos: ${pos}, size: ${size}, rotation: ${rotation}, scale: ${scale}, emoji: ${emoji}}';
  }
}

class _StickerReader extends fb.TableReader<Sticker> {
  const _StickerReader();

  @override
  Sticker createObject(fb.BufferContext bc, int offset) => 
    Sticker._(bc, offset);
}

class StickerBuilder {
  StickerBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addMediaIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTempOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPos(int offset) {
    fbBuilder.addStruct(2, offset);
    return fbBuilder.offset;
  }
  int addSize(int offset) {
    fbBuilder.addStruct(3, offset);
    return fbBuilder.offset;
  }
  int addRotation(double? rotation) {
    fbBuilder.addFloat32(4, rotation);
    return fbBuilder.offset;
  }
  int addScale(double? scale) {
    fbBuilder.addFloat32(5, scale);
    return fbBuilder.offset;
  }
  int addEmojiOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StickerObjectBuilder extends fb.ObjectBuilder {
  final String? _mediaId;
  final String? _temp;
  final OffsetObjectBuilder? _pos;
  final OffsetObjectBuilder? _size;
  final double? _rotation;
  final double? _scale;
  final String? _emoji;

  StickerObjectBuilder({
    String? mediaId,
    String? temp,
    OffsetObjectBuilder? pos,
    OffsetObjectBuilder? size,
    double? rotation,
    double? scale,
    String? emoji,
  })
      : _mediaId = mediaId,
        _temp = temp,
        _pos = pos,
        _size = size,
        _rotation = rotation,
        _scale = scale,
        _emoji = emoji;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? mediaIdOffset = _mediaId == null ? null
        : fbBuilder.writeString(_mediaId!);
    final int? tempOffset = _temp == null ? null
        : fbBuilder.writeString(_temp!);
    final int? emojiOffset = _emoji == null ? null
        : fbBuilder.writeString(_emoji!);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, mediaIdOffset);
    fbBuilder.addOffset(1, tempOffset);
    if (_pos != null) {
      fbBuilder.addStruct(2, _pos!.finish(fbBuilder));
    }
    if (_size != null) {
      fbBuilder.addStruct(3, _size!.finish(fbBuilder));
    }
    fbBuilder.addFloat32(4, _rotation);
    fbBuilder.addFloat32(5, _scale);
    fbBuilder.addOffset(6, emojiOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class FullSticker {
  FullSticker._(this._bc, this._bcOffset);
  factory FullSticker(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FullSticker> reader = _FullStickerReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Sticker? get sticker => Sticker.reader.vTableGetNullable(_bc, _bcOffset, 4);
  FullMedia? get fullMedia => FullMedia.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'FullSticker{sticker: ${sticker}, fullMedia: ${fullMedia}}';
  }

  FullStickerT unpack() => FullStickerT(
      sticker: sticker?.unpack(),
      fullMedia: fullMedia?.unpack());

  static int pack(fb.Builder fbBuilder, FullStickerT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class FullStickerT implements fb.Packable {
  StickerT? sticker;
  FullMediaT? fullMedia;

  FullStickerT({
      this.sticker,
      this.fullMedia});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? stickerOffset = sticker?.pack(fbBuilder);
    final int? fullMediaOffset = fullMedia?.pack(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, stickerOffset);
    fbBuilder.addOffset(1, fullMediaOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'FullStickerT{sticker: ${sticker}, fullMedia: ${fullMedia}}';
  }
}

class _FullStickerReader extends fb.TableReader<FullSticker> {
  const _FullStickerReader();

  @override
  FullSticker createObject(fb.BufferContext bc, int offset) => 
    FullSticker._(bc, offset);
}

class FullStickerBuilder {
  FullStickerBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addStickerOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFullMediaOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FullStickerObjectBuilder extends fb.ObjectBuilder {
  final StickerObjectBuilder? _sticker;
  final FullMediaObjectBuilder? _fullMedia;

  FullStickerObjectBuilder({
    StickerObjectBuilder? sticker,
    FullMediaObjectBuilder? fullMedia,
  })
      : _sticker = sticker,
        _fullMedia = fullMedia;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? stickerOffset = _sticker?.getOrCreateOffset(fbBuilder);
    final int? fullMediaOffset = _fullMedia?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, stickerOffset);
    fbBuilder.addOffset(1, fullMediaOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MessageEventRequest {
  MessageEventRequest._(this._bc, this._bcOffset);
  factory MessageEventRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageEventRequest> reader = _MessageEventRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get type => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0);
  MessageEvent? get messageEvent => MessageEvent.reader.vTableGetNullable(_bc, _bcOffset, 6);
  FullMedia? get fullMedia => FullMedia.reader.vTableGetNullable(_bc, _bcOffset, 8);
  Notifications? get notifications => Notifications.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'MessageEventRequest{type: ${type}, messageEvent: ${messageEvent}, fullMedia: ${fullMedia}, notifications: ${notifications}}';
  }

  MessageEventRequestT unpack() => MessageEventRequestT(
      type: type,
      messageEvent: messageEvent?.unpack(),
      fullMedia: fullMedia?.unpack(),
      notifications: notifications?.unpack());

  static int pack(fb.Builder fbBuilder, MessageEventRequestT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MessageEventRequestT implements fb.Packable {
  int type;
  MessageEventT? messageEvent;
  FullMediaT? fullMedia;
  NotificationsT? notifications;

  MessageEventRequestT({
      this.type = 0,
      this.messageEvent,
      this.fullMedia,
      this.notifications});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? messageEventOffset = messageEvent?.pack(fbBuilder);
    final int? fullMediaOffset = fullMedia?.pack(fbBuilder);
    final int? notificationsOffset = notifications?.pack(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addUint8(0, type);
    fbBuilder.addOffset(1, messageEventOffset);
    fbBuilder.addOffset(2, fullMediaOffset);
    fbBuilder.addOffset(3, notificationsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MessageEventRequestT{type: ${type}, messageEvent: ${messageEvent}, fullMedia: ${fullMedia}, notifications: ${notifications}}';
  }
}

class _MessageEventRequestReader extends fb.TableReader<MessageEventRequest> {
  const _MessageEventRequestReader();

  @override
  MessageEventRequest createObject(fb.BufferContext bc, int offset) => 
    MessageEventRequest._(bc, offset);
}

class MessageEventRequestBuilder {
  MessageEventRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addType(int? type) {
    fbBuilder.addUint8(0, type);
    return fbBuilder.offset;
  }
  int addMessageEventOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addFullMediaOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addNotificationsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageEventRequestObjectBuilder extends fb.ObjectBuilder {
  final int? _type;
  final MessageEventObjectBuilder? _messageEvent;
  final FullMediaObjectBuilder? _fullMedia;
  final NotificationsObjectBuilder? _notifications;

  MessageEventRequestObjectBuilder({
    int? type,
    MessageEventObjectBuilder? messageEvent,
    FullMediaObjectBuilder? fullMedia,
    NotificationsObjectBuilder? notifications,
  })
      : _type = type,
        _messageEvent = messageEvent,
        _fullMedia = fullMedia,
        _notifications = notifications;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageEventOffset = _messageEvent?.getOrCreateOffset(fbBuilder);
    final int? fullMediaOffset = _fullMedia?.getOrCreateOffset(fbBuilder);
    final int? notificationsOffset = _notifications?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addUint8(0, _type);
    fbBuilder.addOffset(1, messageEventOffset);
    fbBuilder.addOffset(2, fullMediaOffset);
    fbBuilder.addOffset(3, notificationsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MessageEvent {
  MessageEvent._(this._bc, this._bcOffset);
  factory MessageEvent(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageEvent> reader = _MessageEventReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  MessageId? get chatId => MessageId.reader.vTableGetNullable(_bc, _bcOffset, 4);
  int get type => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String? get reactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get senderId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get senderTag => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get messageId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get root => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  String? get tag => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  int get timestamp => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 20, 0);
  String? get forwardedFrom => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  String? get forwardedFromTag => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  String? get paymentId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  List<String>? get nodes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 28);
  List<String>? get replies => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 30);
  String? get txt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  String? get mediaId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  String? get tempMedia => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  String? get tempPayment => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  String? get emoji => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  List<Sticker>? get sticks => const fb.ListReader<Sticker>(Sticker.reader).vTableGetNullable(_bc, _bcOffset, 42);
  Offset? get snipSize => Offset.reader.vTableGetNullable(_bc, _bcOffset, 44);

  @override
  String toString() {
    return 'MessageEvent{chatId: ${chatId}, type: ${type}, reactionId: ${reactionId}, senderId: ${senderId}, senderTag: ${senderTag}, messageId: ${messageId}, root: ${root}, tag: ${tag}, timestamp: ${timestamp}, forwardedFrom: ${forwardedFrom}, forwardedFromTag: ${forwardedFromTag}, paymentId: ${paymentId}, nodes: ${nodes}, replies: ${replies}, txt: ${txt}, mediaId: ${mediaId}, tempMedia: ${tempMedia}, tempPayment: ${tempPayment}, emoji: ${emoji}, sticks: ${sticks}, snipSize: ${snipSize}}';
  }

  MessageEventT unpack() => MessageEventT(
      chatId: chatId?.unpack(),
      type: type,
      reactionId: reactionId,
      senderId: senderId,
      senderTag: senderTag,
      messageId: messageId,
      root: root,
      tag: tag,
      timestamp: timestamp,
      forwardedFrom: forwardedFrom,
      forwardedFromTag: forwardedFromTag,
      paymentId: paymentId,
      nodes: const fb.ListReader<String>(fb.StringReader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 28),
      replies: const fb.ListReader<String>(fb.StringReader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 30),
      txt: txt,
      mediaId: mediaId,
      tempMedia: tempMedia,
      tempPayment: tempPayment,
      emoji: emoji,
      sticks: sticks?.map((e) => e.unpack()).toList(),
      snipSize: snipSize?.unpack());

  static int pack(fb.Builder fbBuilder, MessageEventT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MessageEventT implements fb.Packable {
  MessageIdT? chatId;
  int type;
  String? reactionId;
  String? senderId;
  String? senderTag;
  String? messageId;
  String? root;
  String? tag;
  int timestamp;
  String? forwardedFrom;
  String? forwardedFromTag;
  String? paymentId;
  List<String>? nodes;
  List<String>? replies;
  String? txt;
  String? mediaId;
  String? tempMedia;
  String? tempPayment;
  String? emoji;
  List<StickerT>? sticks;
  OffsetT? snipSize;

  MessageEventT({
      this.chatId,
      this.type = 0,
      this.reactionId,
      this.senderId,
      this.senderTag,
      this.messageId,
      this.root,
      this.tag,
      this.timestamp = 0,
      this.forwardedFrom,
      this.forwardedFromTag,
      this.paymentId,
      this.nodes,
      this.replies,
      this.txt,
      this.mediaId,
      this.tempMedia,
      this.tempPayment,
      this.emoji,
      this.sticks,
      this.snipSize});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? chatIdOffset = chatId?.pack(fbBuilder);
    final int? reactionIdOffset = reactionId == null ? null
        : fbBuilder.writeString(reactionId!);
    final int? senderIdOffset = senderId == null ? null
        : fbBuilder.writeString(senderId!);
    final int? senderTagOffset = senderTag == null ? null
        : fbBuilder.writeString(senderTag!);
    final int? messageIdOffset = messageId == null ? null
        : fbBuilder.writeString(messageId!);
    final int? rootOffset = root == null ? null
        : fbBuilder.writeString(root!);
    final int? tagOffset = tag == null ? null
        : fbBuilder.writeString(tag!);
    final int? forwardedFromOffset = forwardedFrom == null ? null
        : fbBuilder.writeString(forwardedFrom!);
    final int? forwardedFromTagOffset = forwardedFromTag == null ? null
        : fbBuilder.writeString(forwardedFromTag!);
    final int? paymentIdOffset = paymentId == null ? null
        : fbBuilder.writeString(paymentId!);
    final int? nodesOffset = nodes == null ? null
        : fbBuilder.writeList(nodes!.map(fbBuilder.writeString).toList());
    final int? repliesOffset = replies == null ? null
        : fbBuilder.writeList(replies!.map(fbBuilder.writeString).toList());
    final int? txtOffset = txt == null ? null
        : fbBuilder.writeString(txt!);
    final int? mediaIdOffset = mediaId == null ? null
        : fbBuilder.writeString(mediaId!);
    final int? tempMediaOffset = tempMedia == null ? null
        : fbBuilder.writeString(tempMedia!);
    final int? tempPaymentOffset = tempPayment == null ? null
        : fbBuilder.writeString(tempPayment!);
    final int? emojiOffset = emoji == null ? null
        : fbBuilder.writeString(emoji!);
    final int? sticksOffset = sticks == null ? null
        : fbBuilder.writeList(sticks!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(21);
    fbBuilder.addOffset(0, chatIdOffset);
    fbBuilder.addUint8(1, type);
    fbBuilder.addOffset(2, reactionIdOffset);
    fbBuilder.addOffset(3, senderIdOffset);
    fbBuilder.addOffset(4, senderTagOffset);
    fbBuilder.addOffset(5, messageIdOffset);
    fbBuilder.addOffset(6, rootOffset);
    fbBuilder.addOffset(7, tagOffset);
    fbBuilder.addUint64(8, timestamp);
    fbBuilder.addOffset(9, forwardedFromOffset);
    fbBuilder.addOffset(10, forwardedFromTagOffset);
    fbBuilder.addOffset(11, paymentIdOffset);
    fbBuilder.addOffset(12, nodesOffset);
    fbBuilder.addOffset(13, repliesOffset);
    fbBuilder.addOffset(14, txtOffset);
    fbBuilder.addOffset(15, mediaIdOffset);
    fbBuilder.addOffset(16, tempMediaOffset);
    fbBuilder.addOffset(17, tempPaymentOffset);
    fbBuilder.addOffset(18, emojiOffset);
    fbBuilder.addOffset(19, sticksOffset);
    if (snipSize != null) {
      fbBuilder.addStruct(20, snipSize!.pack(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MessageEventT{chatId: ${chatId}, type: ${type}, reactionId: ${reactionId}, senderId: ${senderId}, senderTag: ${senderTag}, messageId: ${messageId}, root: ${root}, tag: ${tag}, timestamp: ${timestamp}, forwardedFrom: ${forwardedFrom}, forwardedFromTag: ${forwardedFromTag}, paymentId: ${paymentId}, nodes: ${nodes}, replies: ${replies}, txt: ${txt}, mediaId: ${mediaId}, tempMedia: ${tempMedia}, tempPayment: ${tempPayment}, emoji: ${emoji}, sticks: ${sticks}, snipSize: ${snipSize}}';
  }
}

class _MessageEventReader extends fb.TableReader<MessageEvent> {
  const _MessageEventReader();

  @override
  MessageEvent createObject(fb.BufferContext bc, int offset) => 
    MessageEvent._(bc, offset);
}

class MessageEventBuilder {
  MessageEventBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(21);
  }

  int addChatIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addType(int? type) {
    fbBuilder.addUint8(1, type);
    return fbBuilder.offset;
  }
  int addReactionIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSenderIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSenderTagOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMessageIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addRootOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addTagOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint64(8, timestamp);
    return fbBuilder.offset;
  }
  int addForwardedFromOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addForwardedFromTagOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addPaymentIdOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addNodesOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addRepliesOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addTxtOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addMediaIdOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addTempMediaOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addTempPaymentOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addEmojiOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addSticksOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addSnipSize(int offset) {
    fbBuilder.addStruct(20, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageEventObjectBuilder extends fb.ObjectBuilder {
  final MessageIdObjectBuilder? _chatId;
  final int? _type;
  final String? _reactionId;
  final String? _senderId;
  final String? _senderTag;
  final String? _messageId;
  final String? _root;
  final String? _tag;
  final int? _timestamp;
  final String? _forwardedFrom;
  final String? _forwardedFromTag;
  final String? _paymentId;
  final List<String>? _nodes;
  final List<String>? _replies;
  final String? _txt;
  final String? _mediaId;
  final String? _tempMedia;
  final String? _tempPayment;
  final String? _emoji;
  final List<StickerObjectBuilder>? _sticks;
  final OffsetObjectBuilder? _snipSize;

  MessageEventObjectBuilder({
    MessageIdObjectBuilder? chatId,
    int? type,
    String? reactionId,
    String? senderId,
    String? senderTag,
    String? messageId,
    String? root,
    String? tag,
    int? timestamp,
    String? forwardedFrom,
    String? forwardedFromTag,
    String? paymentId,
    List<String>? nodes,
    List<String>? replies,
    String? txt,
    String? mediaId,
    String? tempMedia,
    String? tempPayment,
    String? emoji,
    List<StickerObjectBuilder>? sticks,
    OffsetObjectBuilder? snipSize,
  })
      : _chatId = chatId,
        _type = type,
        _reactionId = reactionId,
        _senderId = senderId,
        _senderTag = senderTag,
        _messageId = messageId,
        _root = root,
        _tag = tag,
        _timestamp = timestamp,
        _forwardedFrom = forwardedFrom,
        _forwardedFromTag = forwardedFromTag,
        _paymentId = paymentId,
        _nodes = nodes,
        _replies = replies,
        _txt = txt,
        _mediaId = mediaId,
        _tempMedia = tempMedia,
        _tempPayment = tempPayment,
        _emoji = emoji,
        _sticks = sticks,
        _snipSize = snipSize;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? chatIdOffset = _chatId?.getOrCreateOffset(fbBuilder);
    final int? reactionIdOffset = _reactionId == null ? null
        : fbBuilder.writeString(_reactionId!);
    final int? senderIdOffset = _senderId == null ? null
        : fbBuilder.writeString(_senderId!);
    final int? senderTagOffset = _senderTag == null ? null
        : fbBuilder.writeString(_senderTag!);
    final int? messageIdOffset = _messageId == null ? null
        : fbBuilder.writeString(_messageId!);
    final int? rootOffset = _root == null ? null
        : fbBuilder.writeString(_root!);
    final int? tagOffset = _tag == null ? null
        : fbBuilder.writeString(_tag!);
    final int? forwardedFromOffset = _forwardedFrom == null ? null
        : fbBuilder.writeString(_forwardedFrom!);
    final int? forwardedFromTagOffset = _forwardedFromTag == null ? null
        : fbBuilder.writeString(_forwardedFromTag!);
    final int? paymentIdOffset = _paymentId == null ? null
        : fbBuilder.writeString(_paymentId!);
    final int? nodesOffset = _nodes == null ? null
        : fbBuilder.writeList(_nodes!.map(fbBuilder.writeString).toList());
    final int? repliesOffset = _replies == null ? null
        : fbBuilder.writeList(_replies!.map(fbBuilder.writeString).toList());
    final int? txtOffset = _txt == null ? null
        : fbBuilder.writeString(_txt!);
    final int? mediaIdOffset = _mediaId == null ? null
        : fbBuilder.writeString(_mediaId!);
    final int? tempMediaOffset = _tempMedia == null ? null
        : fbBuilder.writeString(_tempMedia!);
    final int? tempPaymentOffset = _tempPayment == null ? null
        : fbBuilder.writeString(_tempPayment!);
    final int? emojiOffset = _emoji == null ? null
        : fbBuilder.writeString(_emoji!);
    final int? sticksOffset = _sticks == null ? null
        : fbBuilder.writeList(_sticks!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(21);
    fbBuilder.addOffset(0, chatIdOffset);
    fbBuilder.addUint8(1, _type);
    fbBuilder.addOffset(2, reactionIdOffset);
    fbBuilder.addOffset(3, senderIdOffset);
    fbBuilder.addOffset(4, senderTagOffset);
    fbBuilder.addOffset(5, messageIdOffset);
    fbBuilder.addOffset(6, rootOffset);
    fbBuilder.addOffset(7, tagOffset);
    fbBuilder.addUint64(8, _timestamp);
    fbBuilder.addOffset(9, forwardedFromOffset);
    fbBuilder.addOffset(10, forwardedFromTagOffset);
    fbBuilder.addOffset(11, paymentIdOffset);
    fbBuilder.addOffset(12, nodesOffset);
    fbBuilder.addOffset(13, repliesOffset);
    fbBuilder.addOffset(14, txtOffset);
    fbBuilder.addOffset(15, mediaIdOffset);
    fbBuilder.addOffset(16, tempMediaOffset);
    fbBuilder.addOffset(17, tempPaymentOffset);
    fbBuilder.addOffset(18, emojiOffset);
    fbBuilder.addOffset(19, sticksOffset);
    if (_snipSize != null) {
      fbBuilder.addStruct(20, _snipSize!.finish(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PaymentPush {
  PaymentPush._(this._bc, this._bcOffset);
  factory PaymentPush(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PaymentPush> reader = _PaymentPushReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get tempId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PaymentPush{id: ${id}, tempId: ${tempId}}';
  }

  PaymentPushT unpack() => PaymentPushT(
      id: id,
      tempId: tempId);

  static int pack(fb.Builder fbBuilder, PaymentPushT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class PaymentPushT implements fb.Packable {
  String? id;
  String? tempId;

  PaymentPushT({
      this.id,
      this.tempId});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? idOffset = id == null ? null
        : fbBuilder.writeString(id!);
    final int? tempIdOffset = tempId == null ? null
        : fbBuilder.writeString(tempId!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, tempIdOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'PaymentPushT{id: ${id}, tempId: ${tempId}}';
  }
}

class _PaymentPushReader extends fb.TableReader<PaymentPush> {
  const _PaymentPushReader();

  @override
  PaymentPush createObject(fb.BufferContext bc, int offset) => 
    PaymentPush._(bc, offset);
}

class PaymentPushBuilder {
  PaymentPushBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTempIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PaymentPushObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _tempId;

  PaymentPushObjectBuilder({
    String? id,
    String? tempId,
  })
      : _id = id,
        _tempId = tempId;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? tempIdOffset = _tempId == null ? null
        : fbBuilder.writeString(_tempId!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, tempIdOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
